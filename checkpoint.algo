ALGORITHM search array
VAR
    set1 : ARRAY_OF INTEGER[4];
    set2 : ARRAY_OF INTEGER[5];
    sum, fidelis, stan, count: INTEGER:= 0
BEGIN
    set1 := {3,1,7,9}
    set2 := {2,4,1,9,3}
    
    //numbers = {3,54,32,77,12,34,15}
    //Add all the odd numbers in this array;


    
    FOR fidelis FROM 0 TO 3 DO
        count:=0
        FOR stan FROM 0 TO 4 DO
            IF (set1[fidelis]=set2[stan]) THEN
                BREAK;
            END_IF
            count:=count+1
        END_FOR
        IF (count=5) THEN
            sum := sum + set1[fidelis]
        END_IF

    END_FOR
    FOR stan FROM 0 TO 4 DO
        count:=0
        FOR fidelis FROM 0 TO 3 DO
            IF (set2[stan]=set1[fidelis]) THEN
                BREAK;
            END_IF
            count:=count+1
        END_FOR
        IF (count=4) THEN
            sum := sum + set2[stan]
        END_IF

    END_FOR
    
    Write(sum);
END

    // a1 ={3,2,7,1}
    
    // a2 ={1,2,0,4}

ALGORITHM algorithm_name
VAR
    a1 : ARRAY_OF INTEGER[4];
    a2 : ARRAY_OF INTEGER[4];
    sum,i multi0,multi1,multi2,multi3, INTEGER =0
BEGIN
    a1 ={3,2,7,1}
    a2 ={1,2,0,4}
    FOR i FROM 0 TO 3 STEP step  DO
        sum= sum + (a1[i] *a2[i])
    END_FOR
    
    Write(sum)

END

FUNCTION dot_product(a1, a2) : INTEGER
VAR
    sum, i  : INTEGER:= 0;
BEGIN
    IF (a1.length<>a2.length) THEN
        BREAK;
    END_IF
    FOR i FROM 0 TO a2.length -1 STEP step  DO
        sum= sum + (a1[i] *a2[i])
    END_FOR

    RETURN sum ;
END

PROCEDURE procedure_name(parameters)
VAR
    set_declarations
BEGIN
    set_instructions
END

ALGORITHM algorithm_name
VAR
    v1,v2,v3,v4,v5,v6 : ARRAY_OF INTEGER[5]; 
BEGIN
    v1:={1, 0,0}
    v2:= {0,1,1}
    v3:={}
    v4:= {}
    v5:={}
    v6:= {}

    IF (dot_product(v1,v2)=0) THEN
        Write("v1 and v2 are othogonal")
    END_IF

    
END